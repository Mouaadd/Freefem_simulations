// definir les constantes du modèle
real Tfinal=50., dt=0.1,t=0;
real D=2.;
real v=5, L=30;
real rplus=1, rmoins=2,K=10, ro=0.25;
real j=0; // enfonction de comment est initialiser freefem, vecteur commence à 0 ou 1
real[int] P(Tfinal/dt);
real[int] T(Tfinal/dt);
// peut-être + pu - 1 


// definir les bords 
border a(t=0,20){x=t; y=0; }
border b(t=0,40){x=20; y=t; }
border c(t=20,11){x=t; y=40; }
border d(t=40,44){x=11; y=t; }
border e(t=11,20){x=t; y=44; }
border f(t=44,400){x=20; y=t; }
border m(t=20,0){x=t; y=400; }
border h(t=400,44){x=0; y=t;}  
border i(t=0,9){x=t; y=44;}  
border r(t=44,40){x=9; y=t;}  
border k(t=9,0){x=t; y=40;}  
border l(t=40,0){x=0; y=t;}  

int n= 5;//20;  // unite du nombre de noeuds

// maillage du domaine avec n noeuds sur le bord a,...

mesh Th=buildmesh( a(2*n)+b(2*n)+c(n)+d(n)+e(n)+f(4*n)+m(n)+h(4*n)+i(n)+r(n)+k(n)+l(2*n));

// Tracer la grille 
plot(Th,wait=1,fill=1,ps="grille_tunnel.eps");  

// definition de l'espace d'approximation
fespace Vh(Th,P2);     // P1 ou P2 FE space
Vh uh,vh,Un,uh2,vh2;              // inconnues et fct test.

// Définir g 
func real g(real Un, real x2, real t)
{
if (v*t<x2 && x2 < v*t+L) return rplus*(1-(Un/K));
else return rplus*(1-(Un/K))-rmoins;
};

// formulation du problème 
problem envelope(uh2,vh2) =
int2d(Th)( D*dt*(dx(uh2)*dx(vh2) + dy(uh2)*dy(vh2)) ) + int2d(Th)( uh2*vh2 )
- int2d(Th)(Un*vh2*dt*g(Un,y,t))
- int2d(Th)( Un*vh2 );

// formulation du problème 
problem envelopeinitiale(uh,vh) =
int2d(Th)( D*dt*(dx(uh)*dx(vh) + dy(uh)*dy(vh)) ) + int2d(Th)( uh*vh )
- int2d(Th)(Un*vh*dt*g(Un,y,0))
- int2d(Th)( Un*vh );


// Boucle en temps initial// Boucle en temps
Un=2*K; 
//vector[] integral(int((T/dt)+1));
//real[int] xx(150), yy(150);
plot(Un,fill=1,value=true,wait=1);
while (t<Tfinal)
{
//  resoudre le pb variationnel
	envelopeinitiale;
	P[j] = int2d(Th)( uh );
	T[j] = t;
	j=j+1;
	plot(uh,fill=1,value=true);
	Un=uh;
	//  reinitialiser Un
	//xx[t/dt] = t/dt;
 	//yy[t/dt] = uh;
	
	//integral[int(t/dt)] = sum(uh)*dV;

	t=t+dt;
	
 }


plot([T,P],ps="population_initiale.eps", wait=1);  

t=0;
j=0;
// Boucle en temps 2
Un=uh; 
//vector[] integral(int((T/dt)+1));
//real[int] xx(150), yy(150);
while (t<Tfinal)
{
//  resoudre le pb variationnel
	envelope;

	P[j] = int2d(Th)( uh2 );
	T[j] = t;
	j=j+1;
	plot(uh,fill=1,value=true);
	Un=uh2;
	//  reinitialiser Un
	//xx[t/dt] = t/dt;
 	//yy[t/dt] = uh;
	
	//integral[int(t/dt)] = sum(uh)*dV;

	t=t+dt;
	
	
 }
 
 cout << t ;

//plot([xx,yy],wait=1,ps="plot.eps",value=true,nbiso=60);
plot(uh2,wait=1,ps="plot.eps",value=true,nbiso=60);
//plot(integral, t=0:dt:Tfinal)

plot([T,P],ps="population.eps",wait=1);  
 

//include "ffmatlib.idp"
//ffSaveData(uh,"export_3_uh.txt");

{
// define the precision with which we write the result in the output file (here, with 15 digits) 
ofstream ja("Result2");
int nold=ja.precision(15);

// we write in the file
for (int i = 0; i < j; i++)
ja << T[i] << " " << P[i] << endl;
}